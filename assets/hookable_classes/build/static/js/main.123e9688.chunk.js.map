{"version":3,"sources":["hookable.js","Theme.js","Counter.js","App.js","serviceWorker.ts","index.tsx"],"names":["cls","prop","__isPropGetter","asDescriptor","_ref","_ref2","Object","slicedToArray","val","setVal","__isDescriptor","get","set","newVal","fromGenerator","hook","genFn","deps","fn","gen","next","Hookable","props","Proxy","this","obj","name","defineProperty","createContext","numberColor","asFunctional","initialCount","theme","useContext","Theme","current","useState","_this","clicked","onClick","useCallback","withLogging","useEffect","regenerator_default","a","mark","_callee","wrap","_context","prev","console","log","stop","render","react_default","createElement","style","color","App","className","src_Counter","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yHAoC4BA,6FApCfC,EAAO,iBAAO,CAAEC,gBAAgB,IAEhCC,EAAe,SAAAC,GAAA,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAAEI,EAAFH,EAAA,GAAOI,EAAPJ,EAAA,SAAoB,CAC9CK,gBAAgB,EAChBC,IAAK,kBAAMH,GACXI,IAAK,SAAAC,GAAM,OAAIJ,EAAOI,MAGXC,EAAgB,SAACC,EAAMC,EAAOC,GAAd,OAAuB,SAAAC,GAClD,IAAMC,EAAMH,IASZ,OARAD,EAAK,WAGH,OAFAI,EAAIC,OAEG,WACLD,EAAIC,SAELH,GAEIC,IAGIG,EAAW,SAASC,GAC/B,OAAO,IAAIC,MAAMC,KAAM,CACrBZ,IAAK,SAACa,EAAKC,EAAMlB,GAQf,OAPIA,GAAOA,EAAIN,eACbuB,EAAIC,GAAQJ,EAAMI,GACTlB,GAAOA,EAAIE,eACpBJ,OAAOqB,eAAeF,EAAKC,EAAMlB,GAEjCiB,EAAIC,GAAQlB,GAEP,MC7BEoB,0BAAc,CAC3BC,YAAa,QC2CAC,GFVa9B,6MEzB1B+B,aAAe9B,MAEf+B,MAAQC,qBAAWC,KAEnBC,QAAUhC,EAAaiC,mBAASC,EAAKN,iBACrCO,QAAUnC,EAAaiC,wBAEvBG,QAAUC,sBAAY,WACpBH,EAAKF,SAAW,EAChBE,EAAKC,SAAU,GACd,CAACD,EAAKF,YAETM,YAAc3B,EACZ4B,YADyBC,EAAAC,EAAAC,KAEzB,SAAAC,IAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAA5B,MAAA,OAEE,OADA8B,QAAQC,IAAI,kBADdH,EAAA5B,KAAA,UAGE8B,QAAQC,IAAI,eAHd,wBAAAH,EAAAI,SAAAN,KAKA,MAGFO,OAAShB,EAAKI,YAAY,kBACxBa,EAAAV,EAAAW,cAAA,WACED,EAAAV,EAAAW,cAAA,kBACS,IACPD,EAAAV,EAAAW,cAAA,QAAMC,MAAO,CAAEC,MAAOpB,EAAKL,MAAMH,cAAgBQ,EAAKF,UAEvDE,EAAKC,SAAWgB,EAAAV,EAAAW,cAAA,iCACjBD,EAAAV,EAAAW,cAAA,2BAAmBlB,EAAKN,cACxBuB,EAAAV,EAAAW,cAAA,UAAQhB,QAASF,EAAKE,SAAtB,4CA/BgBlB,GF0Ba,SAAAC,GAAK,OAAI,IAAItB,EAAIsB,GAAO+B,WGlB5CK,EARH,WACV,OACEJ,EAAAV,EAAAW,cAAA,OAAKI,UAAU,OACbL,EAAAV,EAAAW,cAACK,EAAD,CAAS7B,aAAc,QCDT8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASb,OAAOC,EAAAV,EAAAW,cAACY,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.123e9688.chunk.js","sourcesContent":["export const prop = () => ({ __isPropGetter: true });\n\nexport const asDescriptor = ([val, setVal]) => ({\n  __isDescriptor: true,\n  get: () => val,\n  set: newVal => setVal(newVal),\n});\n\nexport const fromGenerator = (hook, genFn, deps) => fn => {\n  const gen = genFn();\n  hook(() => {\n    gen.next();\n\n    return () => {\n      gen.next();\n    };\n  }, deps);\n\n  return fn;\n};\n\nexport const Hookable = function(props) {\n  return new Proxy(this, {\n    set: (obj, name, val) => {\n      if (val && val.__isPropGetter) {\n        obj[name] = props[name];\n      } else if (val && val.__isDescriptor) {\n        Object.defineProperty(obj, name, val);\n      } else {\n        obj[name] = val;\n      }\n      return true;\n    },\n  });\n};\n\nexport const asFunctional = cls => props => new cls(props).render();\n","import { createContext } from \"react\";\n\nexport default createContext({\n  numberColor: \"red\",\n});\n","import React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport {\n  prop,\n  asDescriptor,\n  fromGenerator,\n  Hookable,\n  asFunctional,\n} from \"./hookable\";\nimport Theme from \"./Theme\";\n\nclass Counter extends Hookable {\n  initialCount = prop();\n\n  theme = useContext(Theme);\n\n  current = asDescriptor(useState(this.initialCount));\n  clicked = asDescriptor(useState());\n\n  onClick = useCallback(() => {\n    this.current += 1;\n    this.clicked = true;\n  }, [this.current]);\n\n  withLogging = fromGenerator(\n    useEffect,\n    function*() {\n      console.log(\"did mount\");\n      yield;\n      console.log(\"did unmount\");\n    },\n    [],\n  );\n\n  render = this.withLogging(() => (\n    <div>\n      <p>\n        Value:{\" \"}\n        <span style={{ color: this.theme.numberColor }}>{this.current}</span>\n      </p>\n      {this.clicked && <p>You already clicked!</p>}\n      <p>Initial value: {this.initialCount}</p>\n      <button onClick={this.onClick}>Increase</button>\n    </div>\n  ));\n}\n\nexport default asFunctional(Counter);\n","import React from \"react\";\nimport Counter from \"./Counter\";\nimport {\n  prop,\n  asDescriptor,\n  fromGenerator,\n  Hookable,\n  asFunctional,\n} from \"./hookable\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Counter initialCount={100} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}